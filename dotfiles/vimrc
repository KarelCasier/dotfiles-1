" vim:foldmethod=marker:set ft=vim

" General {{{
  " Reset all auto commands
  autocmd!

  " Disable Vi compatibility mode
  set nocompatible

  " Modify runtime path
  source $ADRC/lib/vim/vim-pathogen/autoload/pathogen.vim
  let g:pathogen_blacklist=['vim-pathogen']
  call pathogen#infect('$ADRC/lib/bash/{}')
  call pathogen#infect('$ADRC/lib/tmux/{}')
  call pathogen#infect('$ADRC/lib/vim/{}')
  call pathogen#infect('$ADRC/usr/vim/{}')
  call pathogen#helptags()

  " With a map leader it's possible to do extra key combinations
  let mapleader = " "
  let maplocalleader = " "
  let g:mapleader = " "

  " Use system clipboard
  set clipboard=unnamed,unnamedplus

  " Sets how many lines of history VIM has to remember
  set history=200

  " Enable filetype plugins
  filetype plugin on
  filetype indent on

  " time out for key codes
  set ttimeout
  set ttimeoutlen=100	" wait up to 100ms after Esc for special key

  " Turn backup off, since most stuff is in SVN, git et.c anyway...
  set nobackup
  set nowb
  set noswapfile

  " Turn persistent undo on
  " means that you can undo even when you close a buffer/VIM
  try
    set undodir=$HOME/.vim/undodir
    set undofile
  catch
  endtry

  " The Silver Searcher
  if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
    command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  endif

" }}}

" User interface {{{

  " Set 5 lines to the cursor - when moving vertically using j/k
  " and also when you click at top or bottom of the creen with mouse
  set scrolloff=5

  " display completion matches in a status line
  set wildmenu
  set wildmode=longest:full,full

  " after leaving buffer set it as hidden (so we can open buffer without saving
  " previous buffer
  set hidden

  " Show what command we are writing
  set showcmd

  " Ignore compiled files
  set wildignore=*.o,*~,*.pyc
  if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
  else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
  endif

  " allows cursor change in tmux mode
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif

  " Current file to terminal tab
  let &titlestring = expand('%:t')
  set title

  " Less annoying error messages
  set shortmess=at

  "Always show current position
  set ruler

  " Height of the command bar
  set cmdheight=1

  " Configure backspace so it acts as it should act
  set backspace=eol,start,indent

  " Ignore case when searching
  set ignorecase

  " When searching try to be smart about cases
  set smartcase

  " Highlight search results
  set hlsearch

  " Makes search act like search in modern browsers
  set incsearch

  " Don't redraw while executing macros (good performance config)
  set lazyredraw

  " For regular expressions turn magic on
  set magic

  " Show matching brackets when text indicator is over them
  set showmatch

  " How many tenths of a second to blink when matching brackets
  set mat=2

  " No annoying sound on errors
  set noerrorbells
  set novisualbell
  set t_vb=
  set tm=500

  " Open new split panes to right and bottom, which feels more natural
  set splitbelow
  set splitright

  " Always show the status line
  set laststatus=2

  " Format the status line
  set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c
" }}}

" Colors and Fonts {{{

  " Enable syntax highlighting
  syntax enable

  " Enable 256 color mode
  set t_Co=256

  " If base16 theme is set from shell, load it
  if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
  else
    " Set theme if possible
    try
      colorscheme base16-tomorrow-night
    catch
    endtry
  endif

  set background=dark

  " Set utf8 as standard encoding and en_US as the standard language
  set encoding=utf8

  " Use Unix as the standard file type
  set ffs=unix,dos,mac

" }}}

" Text, tab and indent related {{{
  " Search down into subfolders
  " Provides tab-completion for all file-related tasks
  set path+=**

  "" Searching includes can be slow
  set complete-=i

  " Use spaces instead of tabs
  set expandtab

  " Be smart when using tabs
  set smarttab

  " 1 tab == 4 spaces
  set shiftwidth=2
  set tabstop=2

  " Linebreak on 500 characters
  set lbr
  set tw=500

  set ai "Auto indent
  set si "Smart indent
  set wrap "Wrap lines

  " When you type xdate in insert mode, change it to current time and date
  " example: 04/11/16 07:50:31
  iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

" }}}

" GUI related {{{

  if has("gui_running")
    " Set extra options when running in GUI mode
    set mouse=a
    set guitablabel=%M\ %t
    autocmd GUIEnter * set vb t_vb=
    autocmd GUIEnter * set guioptions-=e

    " Disable scrollbars (real hackers don't use scrollbars for navigation!)
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L

    " Disable tabs from gui
    set guioptions-=e
    set guioptions-=T

    " Set font according to system
    if has("mac") || has("macunix")
      set gfn=Hack:h12,Source\ Code\ Pro:h12,Menlo:h12
    elseif has("win16") || has("win32")
      set gfn=Hack:h12,Source\ Code\ Pro:h12,Bitstream\ Vera\ Sans\ Mono:h11
    elseif has("gui_gtk2")
      set gfn=Hack\ 12,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
    elseif has("linux")
      set gfn=Hack\ 12,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
    elseif has("unix")
      set gfn=Monospace\ 11
    endif
  endif

" }}}

" Mappings {{{

  " Get off my lawn
  nnoremap <Left> :echoe "Use h"<CR>
  nnoremap <Right> :echoe "Use l"<CR>
  nnoremap <Up> :echoe "Use k"<CR>
  nnoremap <Down> :echoe "Use j"<CR>
  vnoremap <Left> <Esc>:echoe "Use h"<CR>
  vnoremap <Right> <Esc>:echoe "Use l"<CR>
  vnoremap <Up> <Esc>:echoe "Use k"<CR>
  vnoremap <Down> <Esc>:echoe "Use j"<CR>

  " Switch CWD to the directory of the open buffer
  map <leader>cd :cd %:p:h<cr>:pwd<cr>

  " Don't use Ex mode, use Q for formatting.
  " Revert with ":unmap Q".
  map Q gq

  " Make capital yank work like other capital letters
  nnoremap Y y$

  " Pressing ,ss will toggle and untoggle spell checking
  map <leader>ss :setlocal spell!<cr>

  " Toggle paste mode on and off
  map <leader>pp :setlocal paste!<cr>

  " Remove the Windows ^M - when the encodings gets messed up
  noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

  " Quickly open a buffer for scribble
  map <leader>b :e $ADRC/usr/scribble<cr>

  " Select the stuff I just pasted
  nnoremap gV `[V`]

  " Change indent continuously
  vmap < <gv
  vmap > >gv

  " Emacs like keybindings for the command line (:) are better
  " and we cannot use Vi style-binding here anyway, because ESC
  " just closes the command line and using Home and End.. just no, f.e. OSX keyboards
  " do not even have them, because they are useless.
  cnoremap <C-A>		<Home>
  cnoremap <C-E>		<End>
  cnoremap <C-K>		<C-U>
  cnoremap <C-P> <Up>
  cnoremap <C-N> <Down>

  " Create the `tags` file (may need to install ctags first)
  command! MakeTags !ctags -R .

  " :W sudo saves the file
  " (useful for handling the permission-denied error)
  command! W w !sudo tee % > /dev/null

  " Sane pasting
  command! Paste call SmartPaste()
  function! SmartPaste()
    setl paste
    normal "+p
    setl nopaste
  endfunction

  " Show numbers, folds and git diff signs on left
  function! Info()
    if &relativenumber
      windo set norelativenumber foldcolumn=0
      exe 'GitGutterSignsDisable'
      if exists("+cursorcolumn")
        set nocursorcolumn nocursorline
      endif
    else
      windo set relativenumber foldcolumn=1
      exe 'GitGutterSignsEnable'
      if exists("+cursorcolumn")
        set cursorline
      endif
    endif
  endfunction
  command! -bar Info :call Info()
" }}}

" Plugins {{{
  " gitgutter
  let g:gitgutter_signs = 0

  " syntastic
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0

  " EditorConfig
  let g:EditorConfig_core_mode = 'external_command' " Speed up editorconfig plugin
  let g:EditorConfig_exclude_patterns = ['fugitive://.*'] " Fix EditorConfig for fugitive

  " Sneak with simple AceJump-like use
  let g:sneak#streak = 1
  nmap <leader>s :keepj normal H<cr><Plug>(SneakStreak)

  "replace 'f' with 1-char Sneak
  nmap f <Plug>Sneak_f
  nmap F <Plug>Sneak_F
  xmap f <Plug>Sneak_f
  xmap F <Plug>Sneak_F
  omap f <Plug>Sneak_f
  omap F <Plug>Sneak_F
  "replace 't' with 1-char Sneak
  nmap t <Plug>Sneak_t
  nmap T <Plug>Sneak_T
  xmap t <Plug>Sneak_t
  xmap T <Plug>Sneak_T
  omap t <Plug>Sneak_t
  omap T <Plug>Sneak_T

  " Replace normal search with enhanced search
  let g:incsearch#auto_nohlsearch = 1
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)

  " Undotree
  nnoremap <leader>u :UndotreeToggle<cr>

  " Fugitive
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
  nnoremap <silent> <leader>gw :Gwrite<CR>
  nnoremap <silent> <leader>gr :Gremove<CR>
  autocmd BufReadPost fugitive://* set bufhidden=delete

  " Airline
  let g:airline_theme='base16'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9

" }}}

" User configuration {{{
  try
    " Load user configuration
    source $ADRC/usr/vimrc
  catch
  endtry
" }}}
