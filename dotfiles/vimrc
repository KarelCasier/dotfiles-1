" vim:set ft=vim:foldmethod=marker:
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝

" General {{{
  " Reset all auto commands
  autocmd!

  " With a map leader it's possible to do extra key combinations
  let mapleader = ' '
  let maplocalleader = ' '
  let g:mapleader = ' '

  " Sets how many lines of history VIM has to remember
  set history=200

  " Enable filetype plugins
  filetype plugin on
  filetype indent on

  " time out for key codes
  set ttimeout
  set ttimeoutlen=100 " wait up to 100ms after Esc for special key

  " We are fast
  set ttyfast

  " Turn backup off, since most stuff is in SVN, git et.c anyway...
  set nobackup
  set nowb
  set noswapfile

  " Turn persistent undo on
  " means that you can undo even when you close a buffer/VIM
  try
    set undodir=$HOME/.vim/undodir
    set undofile
  catch
  endtry

  " Use faster grep alternatives if possible
  if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat^=%f:%l:%c:%m
  elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
    set grepformat^=%f:%l:%c:%m
  endif

  " Disable matchparen plugin (super slow sometimes)
  let loaded_matchparen = 1

" }}}

" User interface {{{

  " Set 5 lines to the cursor - when moving vertically using j/k
  " and also when you click at top or bottom of the creen with mouse
  set scrolloff=5

  " display completion matches in a status line
  set wildmenu
  set wildmode=list:longest,list:full

  " after leaving buffer set it as hidden (so we can open buffer without saving
  " previous buffer)
  set hidden

  " Show what command we are writing
  set showcmd

  " Show what mode we are in
  set showmode

  " Ignore compiled files
  set wildignore=*.o,*~,*.pyc,*.class
  if has('win16') || has('win32')
    set wildignore+=.git\*,.hg\*,.svn\*
  else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
  endif

  " allows cursor change in tmux mode
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
  else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
  endif

  " Less annoying error messages
  set shortmess=at

  "Always show current position
  set ruler

  " Height of the command bar
  set cmdheight=1

  " Configure backspace so it acts as it should act
  set backspace=eol,start,indent

  " Ignore case when searching
  set ignorecase

  " When searching try to be smart about cases
  set smartcase

  " Highlight search results
  set hlsearch

  " Makes search act like search in modern browsers
  set incsearch

  " Don't redraw while executing macros (good performance config)
  set lazyredraw

  " For regular expressions turn magic on
  set magic

  " Show matching brackets when text indicator is over them
  set showmatch

  " How many tenths of a second to blink when matching brackets
  set mat=2

  " No annoying sound on errors
  set noerrorbells
  set novisualbell
  set t_vb=
  set tm=500

  " Open new split panes to right and bottom, which feels more natural
  set splitbelow
  set splitright

  " Always show the status line
  set laststatus=2

  " Format the status line
  set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

  " We are using bash
  let g:is_bash=1

  " Always use vertical diffs
  set diffopt+=vertical

  " Show tabs and trailing spaces
  set list listchars=tab:→\ ,trail:·

  " Automatically rebalance windows on vim resize
  autocmd VimResized * :wincmd =

  " use syntax complete if nothing else available
  if has('autocmd') && exists('+omnifunc')
    autocmd Filetype *
          \	if &omnifunc == "" |
          \		setlocal omnifunc=syntaxcomplete#Complete |
          \	endif
  endif

" }}}

" Colors and Fonts {{{

  " Enable syntax highlighting
  syntax enable

  " Enable 256 color mode
  set t_Co=256

  " Set dark background
  set background=dark

  " Set utf8 as standard encoding and en_US as the standard language
  set encoding=utf8

  " Use Unix as the standard file type
  set ffs=unix,dos,mac

  " Performance improvement
  syntax sync minlines=256
  set synmaxcol=256

  " Highlight 121th character in line
  autocmd BufEnter * highlight ColorColumn ctermbg=darkred ctermfg=white
  autocmd BufEnter * call matchadd('ColorColumn', '\%121v', 100) "set column nr


" }}}

" Statusline {{{
  set statusline=
  set statusline +=%1*\ %n\ %*            "buffer number
  set statusline +=%5*%{&ff}%*            "file format
  set statusline +=%3*%y%*                "file type
  set statusline +=%4*\ %<%F%*            "full path
  set statusline +=%2*%m%*                "modified flag
  set statusline +=%1*%=%5l%*             "current line
  set statusline +=%2*/%L%*               "total lines
  set statusline +=%1*%4v\ %*             "virtual column number
  set statusline +=%2*0x%04B\ %*          "character under cursor
" }}}

" Text, tab and indent related {{{
  " Search down into subfolders
  " Provides tab-completion for all file-related tasks
  set path+=**

  " Include spelling completion when spelling enabled
  set complete+=kspell

  " Use old regexpengine (maybe better performance)
  set regexpengine=1

  " Includes completion is super slow, disable it
  set complete-=i

  " Better completion menu
  set completeopt=longest,menuone

  " Use spaces instead of tabs
  set expandtab

  " Be smart when using tabs
  set smarttab

  " 1 tab == 2 spaces
  set shiftwidth=4
  set tabstop=4

  " Linebreak on 500 characters
  set lbr
  set tw=500

  set ai "Auto indent
  set si "Smart indent
  set wrap "Wrap lines

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

" }}}

" GUI related {{{

  if has('gui_running')
    " Set extra options when running in GUI mode
    set mouse=a
    set guitablabel=%M\ %t
    autocmd GUIEnter * set vb t_vb=
    autocmd GUIEnter * set guioptions-=e

    " Disable scrollbars (real hackers don't use scrollbars for navigation!)
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L

    " Disable tabs from gui
    set guioptions-=e
    set guioptions-=T

    " Set font according to system
    if has('mac') || has('macunix')
      set gfn=Terminus:h12,Source\ Code\ Pro:h12,Menlo:h12
    elseif has('win16') || has('win32')
      set gfn=Terminus:h12,Source\ Code\ Pro:h12,Bitstream\ Vera\ Sans\ Mono:h11
    elseif has('gui_gtk2')
      set gfn=Terminus\ 12,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
    elseif has('linux')
      set gfn=Terminus\ 12,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
    elseif has('unix')
      set gfn=Monospace\ 11
    endif
  endif

" }}}

" Mappings {{{

  " Switch CWD to the directory of the open buffer
  map <leader>cd :cd %:p:h<cr>:pwd<cr>

  " Don't use Ex mode, use Q for formatting.
  " Revert with ":unmap Q".
  map Q gq

  " Make capital yank work like other capital letters
  nnoremap Y y$

  " Pressing ,ss will toggle and untoggle spell checking
  map <leader>ss :setlocal spell!<cr>

  " Toggle paste mode on and off
  map <leader>pp :setlocal paste!<cr>

  " Clear last search highlight
  map <leader><cr> :noh<cr>

  " Reset syntax
  map <leader><leader> :syntax off<cr> :syntax on<cr>

  " Select the stuff I just pasted
  nnoremap gV `[V`]

  " Emacs like keybindings for the command line (:) are better
  " and we cannot use Vi style-binding here anyway, because ESC
  " just closes the command line and using Home and End.. just no, f.e. OSX keyboards
  " do not even have them, because they are useless.
  cnoremap <C-A>    <Home>
  cnoremap <C-E>    <End>
  cnoremap <C-K>    <C-U>
  cnoremap <C-P> <Up>
  cnoremap <C-N> <Down>

  function! StripTrailingWhitespaces()
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    call cursor(l, c)
  endfun
  command! -bar Respace :call StripTrailingWhitespaces()

  " Create the `tags` file (may need to install ctags first)
  command! MakeTags !ctags -R .

  " :W sudo saves the file
  " (useful for handling the permission-denied error)
  command! W w !sudo tee % > /dev/null

  " Sane pasting
  command! Paste call SmartPaste()
  function! SmartPaste()
    setl paste
    normal "+p
    setl nopaste
  endfunction

  " Show numbers, folds and git diff signs on left
  function! Info()
    if &number
      windo set norelativenumber nonumber foldcolumn=0
      if exists('+cursorcolumn')
        set nocursorcolumn nocursorline
      endif
    else
      windo set relativenumber number foldcolumn=1
      if exists('+cursorcolumn')
        set cursorline
      endif
    endif
  endfunction
  command! -bar Info :call Info()

  " If session file exists, source it, and then start session recording
  function! Session()
    if filereadable('Session.vim')
      source Session.vim
    endif

    :Obsession
  endfunction
  command! -bar Session :call Session()

" }}}

" Plugins {{{

  " Modify runtime path
  source $DOTHOME/lib/vim/vim-pathogen/autoload/pathogen.vim
  let g:pathogen_blacklist=['vim-pathogen', 'vim-airline', 'vim-airline-themes', 'vim-gitgutter']
  call pathogen#infect('$DOTHOME/lib/bash/{}')
  call pathogen#infect('$DOTHOME/lib/tmux/{}')
  call pathogen#infect('$DOTHOME/lib/vim/{}')
  call pathogen#infect('$DOTHOME/usr/vim/{}')
  call pathogen#helptags()

  " If base16 theme is set from shell, load it
  if filereadable(expand('~/.vimrc_background'))
    let base16colorspace=256
    source ~/.vimrc_background
  else
    " Set theme if possible
    try
      colorscheme base16-tomorrow-night
    catch
    endtry
  endif

  " Fix some things
  hi clear LineNr
  hi clear SignColumn
  hi clear FoldColumn
  hi Search cterm=NONE ctermfg=18 ctermbg=3

  " gitgutter
  let g:gitgutter_signs = 0

  " VimWiki
  let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

  " syntastic
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_vim_checkers = ['vint']

  " EditorConfig
  let g:EditorConfig_core_mode = 'external_command' " Speed up editorconfig plugin
  let g:EditorConfig_exclude_patterns = ['fugitive://.*'] " Fix EditorConfig for fugitive

  " Fugitive
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
  nnoremap <silent> <leader>gw :Gwrite<CR>
  nnoremap <silent> <leader>gr :Gremove<CR>
  autocmd BufReadPost fugitive://* set bufhidden=delete

  " Airline
  let g:airline_theme='base16'
  let g:airline#extensions#tabline#enabled=1
  let g:airline#extensions#tabline#show_buffers=0
  let g:airline#extensions#tabline#buffer_min_count=1
  let g:airline#extensions#tabline#show_close_button=0

  " Eclim
  let g:EclimCompletionMethod='omnifunc'
  nnoremap <silent> <leader>jc :JavaCorrect<CR>
  nnoremap <silent> <leader>js :JavaSearch<CR>
  nnoremap <silent> <leader>ji :JavaImport<CR>
  nnoremap <silent> <leader>jI :JavaImportOrganize<CR>
  nnoremap <silent> <leader>jd :JavaDocComment<CR>
  nnoremap <silent> <leader>jD :JavaDocPreview<CR>
  nnoremap <silent> <leader>jt :JUnit %<CR>
  nnoremap <silent> <leader>jT :JUnitFindTest<CR>

  " Supertab
  let g:SuperTabDefaultCompletionType='context'
  let g:SuperTabContextDefaultCompletionType='<c-n>'
  let g:SuperTabLongestEnhanced=1
  let g:SuperTabLongestHighlight=1
  let g:SuperTabCrMapping=1

  " FZF
  imap <c-x><c-k> <plug>(fzf-complete-word)
  imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-j> <plug>(fzf-complete-file-ag)
  " imap <c-x><c-l> <plug>(fzf-complete-line)

  " Enable per-command history.
  " CTRL-N and CTRL-P will be automatically bound to next-history and
  " previous-history instead of down and up. If you don't like the change,
  " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
  let g:fzf_history_dir = '~/.local/share/fzf-history'

  " If this is Git repo, list git files only, otherwise list all
  function! VFiles()
    if !empty(glob('.git'))
      execute 'GFiles'
    else
      execute 'Files'
    endif
  endfunction

  " Menus {{{
    " Search everywhere (fzf.vim Ag)
    nmap <leader>/ :Ag<cr>

    " Help tags (fzf.vim Helptags)
    nmap <leader>? :Helptags<cr>

    " Tags (fzf.vim Tags)
    nmap <leader>t :Tags<cr>

    " Buffer tags (fzf.vim BTags)
    nmap <leader>o :BTags<cr>

    " Files (fzf.vim Files or GFiles)
    nmap <leader>f :call VFiles()<cr>

    " Actions (fzf.vim Commands)
    nmap <leader>a :Commands<cr>

    " Snippets (fzf.vim Snippets)
    nmap <leader>s :Snippets<cr>

    " Commits (fzf.vim Commits)
    nmap <leader>c :Commits<cr>

    " History (fzf.vim History)
    nmap <leader>h :History<cr>

    " Buffers (fzf.vim Buffers)
    nmap <leader>b :Buffers<cr>

    " Windows (fzf.vim Windows)
    nmap <leader>w :Windows<cr>
  " }}}

" }}}

" User configuration {{{
  try
    " Load user configuration
    source $DOTHOME/usr/vimrc
  catch
  endtry
" }}}
