" vim:foldmethod=marker:set ft=vim:
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝

" General {{{

  " Reset all auto commands
  augroup VimRc
    autocmd!
  augroup END

  " Sets how many lines of history VIM has to remember
  set history=200

  " Enable filetype plugins
  filetype plugin on
  filetype indent on
  runtime macros/matchit.vim
  let loaded_matchparen = 1 " disable matchparen, can be really slow

  " time out for key codes
  set ttimeout
  set ttimeoutlen=100 " wait up to 100ms after Esc for special key

  " We are fast
  set ttyfast

  " Turn backup off, since most stuff is in SVN, git et.c anyway...
  set nobackup
  set nowritebackup
  set noswapfile

  " Turn persistent undo on
  " means that you can undo even when you close a buffer/VIM
  try
    set undodir=$HOME/.vim/undodir
    set undofile
  catch
  endtry

  " Use faster grep alternatives if possible
  if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat^=%f:%l:%c:%m
  elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
    set grepformat^=%f:%l:%c:%m
  endif

  " Add cscope support
  set cscopetag cscopeverbose
  set cscopequickfix=s-,c-,d-,i-,t-,e-

" }}}

" User interface {{{

  " Set 5 lines to the cursor - when moving vertically using j/k
  " and also when you click at top or bottom of the creen with mouse
  set scrolloff=5

  " display completion matches in a status line
  set wildmenu
  set wildmode=list:longest,list:full

  " after leaving buffer set it as hidden (so we can open buffer without saving
  " previous buffer)
  set hidden

  " Show what command we are writing
  set showcmd

  " Show what mode we are in
  set showmode

  " Ignore compiled files
  set wildignore=*.o,*~,*.pyc,*.class
  if has('win16') || has('win32')
    set wildignore+=.git\*,.hg\*,.svn\*
  else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
  endif

  if has('nvim')
    " visible incremental command replace
    set inccommand=nosplit

    " allows cursor change
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
  else
    if exists('$TMUX')
      let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
      let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
    else
      let &t_SI = "\e[5 q"
      let &t_EI = "\e[2 q"
    endif
  endif

  " Less annoying error messages
  set shortmess=at

  "Always show current position
  set ruler

  " Height of the command bar
  set cmdheight=1

  " Configure backspace so it acts as it should act
  set backspace=eol,start,indent

  " Ignore case when searching
  set ignorecase

  " When searching try to be smart about cases
  set smartcase

  " Highlight search results
  set hlsearch

  " Makes search act like search in modern browsers
  set incsearch

  " Don't redraw while executing macros (good performance config)
  set lazyredraw

  " For regular expressions turn magic on
  set magic

  " Show matching brackets when text indicator is over them
  set showmatch

  " No annoying sound on errors
  set noerrorbells
  set novisualbell
  set t_vb=
  set timeoutlen=500

  " Open new split panes to right and bottom, which feels more natural
  set splitbelow
  set splitright

  " Always show the status line
  set laststatus=2

  " Status line format
  set statusline=
  set statusline +=\ %n\             "buffer number
  set statusline +=%{&ff}            "file format
  set statusline +=%y                "file type
  set statusline +=\ %<%F            "full path
  set statusline +=%m                "modified flag
  set statusline +=%=%5l             "current line
  set statusline +=/%L               "total lines
  set statusline +=%4v\              "virtual column number
  set statusline +=0x%04B\           "character under cursor

  " Always use vertical diffs
  set diffopt+=vertical

  " Cursor line (it is slowing Vim a bit, but too useful)
  set cursorline

  " Show tabs and trailing spaces
  set list listchars=tab:→\ ,trail:·

  " Automatically rebalance windows on vim resize
  autocmd VimRc VimResized * :wincmd =

" }}}

" Colors and Fonts {{{

  " Enable syntax highlighting
  syntax enable

  " Enable 256 color mode
  set t_Co=256

  " Set dark background
  set background=dark

  " Set utf8 as standard encoding and en_US as the standard language
  set encoding=utf8

  " Use Unix as the standard file type
  set fileformats=unix,dos,mac

  " Limit horizontal and vertical syntax rendering
  syntax sync minlines=256
  set synmaxcol=256

  " Adjust syntax highlighting
  autocmd VimRc BufEnter * call AdjustHighlighting()
  function! AdjustHighlighting()
    " Make all these colors less annoying
    highlight clear LineNr
    highlight clear SignColumn
    highlight clear FoldColumn
    highlight Search cterm=NONE ctermfg=0 ctermbg=3
    highlight StatusLine ctermbg=NONE ctermfg=4
    highlight StatusLineNC cterm=underline ctermbg=NONE ctermfg=19
    highlight VertSplit ctermbg=NONE ctermfg=19
    highlight Title ctermfg=19
    highlight TabLineSel ctermbg=NONE ctermfg=4
    highlight TabLineFill ctermbg=NONE ctermfg=19
    highlight TabLine ctermbg=NONE ctermfg=19

    " Highlight 121th character in line
    highlight ColorColumn ctermbg=darkred ctermfg=white
    call matchadd('ColorColumn', '\%121v', 100) "set column nr
  endfunction

" }}}

" Text, tab and indent related {{{

  " Search down into subfolders
  " Provides tab-completion for all file-related tasks
  set path+=**

  " Include spelling completion when spelling enabled
  set complete+=kspell

  " Use old regexpengine (maybe better performance)
  set regexpengine=1

  " Includes completion is super slow, disable it
  set complete-=i

  " Better completion menu
  set completeopt=longest,menuone

  " Use spaces instead of tabs
  set expandtab

  " Be smart when using tabs
  set smarttab

  " 1 tab == 2 spaces
  set shiftwidth=2
  set tabstop=2

  " Text width is 120 characters
  set textwidth=120

  " Better automatic indentation
  set autoindent
  set smartindent

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd VimRc BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  " Enable omni completion. (Ctrl-X Ctrl-O)
  autocmd VimRc FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd VimRc FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd VimRc FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd VimRc FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd VimRc FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd VimRc FileType c set omnifunc=ccomplete#Complete
  autocmd VimRc FileType java set omnifunc=javacomplete#Complete

  " use syntax complete if nothing else available
  autocmd VimRc Filetype *
        \	if &omnifunc == "" |
        \		setlocal omnifunc=syntaxcomplete#Complete |
        \	endif

" }}}

" GUI related {{{

  if has('gui_running')
    " Set extra options when running in GUI mode
    set mouse=a
    set guitablabel=%M\ %t
    autocmd VimRc GUIEnter * set vb t_vb=
    autocmd VimRc GUIEnter * set guioptions-=e

    " Disable scrollbars (real hackers don't use scrollbars for navigation!)
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L

    " Disable tabs from gui
    set guioptions-=e
    set guioptions-=T

    " Set font according to system
    if has('mac') || has('macunix')
      set guifont=Terminus:h12,Source\ Code\ Pro:h12,Menlo:h12
    elseif has('win16') || has('win32')
      set guifont=Terminus:h12,Source\ Code\ Pro:h12,Bitstream\ Vera\ Sans\ Mono:h11
    elseif has('gui_gtk2')
      set guifont=Terminus\ 12,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
    elseif has('linux')
      set guifont=Terminus\ 12,Source\ Code\ Pro\ 12,Bitstream\ Vera\ Sans\ Mono\ 11
    elseif has('unix')
      set guifont=Monospace\ 11
    endif
  endif

" }}}

" Mappings {{{

  " With a map leader it's possible to do extra key combinations
  let mapleader = ' '
  let maplocalleader = ' '
  let g:mapleader = ' '

  " Clear last search highlight
  map <leader><cr> :noh<cr>

  " Emacs like keybindings for the command line (:) are better
  " and we cannot use Vi style-binding here anyway, because ESC
  " just closes the command line and using Home and End.. just no, f.e. OSX keyboards
  " do not even have them, because they are useless.
  cnoremap <C-A>    <Home>
  cnoremap <C-E>    <End>
  cnoremap <C-K>    <C-U>
  cnoremap <C-P> <Up>
  cnoremap <C-N> <Down>

  " :W sudo saves the file
  " (useful for handling the permission-denied error)
  command! W w !sudo tee % > /dev/null

  " If session file exists, source it, and then start session recording
  function! Session()
    if filereadable('Session.vim')
      source Session.vim
    endif

    :Obsession
  endfunction
  command! -bar Session :call Session()

" }}}

" Plugins {{{

  " Modify runtime path
  source $DOTHOME/lib/vim/vim-pathogen/autoload/pathogen.vim
  let g:pathogen_blacklist=['vim-pathogen', 'vim-airline', 'vim-airline-themes', 'vim-gitgutter']
  call pathogen#infect('$DOTHOME/lib/shell/{}')
  call pathogen#infect('$DOTHOME/lib/tmux/{}')
  call pathogen#infect('$DOTHOME/lib/vim/{}')
  call pathogen#infect('$DOTHOME/usr/vim/{}')
  call pathogen#helptags()

  " If base16 theme is set from shell, load it
  if filereadable(expand('~/.vimrc_background'))
    let base16colorspace=256
    source ~/.vimrc_background
  else
    " Set theme if possible
    try
      colorscheme base16-solarized-dark
    catch
    endtry
  endif

  " VimWiki
  let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

  " EditorConfig
  let g:EditorConfig_core_mode = 'external_command' " Speed up editorconfig plugin
  let g:EditorConfig_exclude_patterns = ['fugitive://.*'] " Fix EditorConfig for fugitive

  " Fugitive
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
  nnoremap <silent> <leader>gw :Gwrite<CR>
  nnoremap <silent> <leader>gr :Gremove<CR>
  autocmd VimRc BufReadPost fugitive://* set bufhidden=delete

  " Completion
  if has('nvim') && has('python3')
    call deoplete#enable()
  endif

  " Neomake
  autocmd VimRc BufWritePost * Neomake
  set statusline+=\ %#ErrorMsg#%{neomake#statusline#LoclistStatus('loc:\ ')}
  set statusline+=\ %#ErrorMsg#%{neomake#statusline#QflistStatus('qf:\ ')}

  " Java
  autocmd VimRc FileType java :call EnableJava()
  function! EnableJava()
    let g:JavaComplete_ImportSortType = 'packageName'
    let g:JavaComplete_ImportOrder = ['*']
    set makeprg=mvn\ $*
    set errorformat=\[%t%[A-Z]%#]\ %f:[%l\\,%c]\ %m,
          \\[%t%[A-Z]%#]\ %f:%l:\ %m,
          \\%A%f:[%l\\,%c]\ %m,
          \\%Csymbol%.%#:\ %m,
          \\%Zlocation%.%#:\ %m,
          \\%AEmbedded\ error:%.%#\ -\ %f:%l:\ %m,
          \\%-Z\ %p^,
          \\%A%f:%l:\ %m,
          \\%-Z\ %p^,
          \\%ARunning\ %f,
          \\%+ZTests\ run%.%#FAILURE!%.%#,
          \\%ARunning\ %f,
          \\%C%.%#,
          \\%+ZTests\ run%.%#FAILURE!%.%#,
          \\%-G%.%#
  endfunction

  " rg command suffix, [options]
  function! VRg_raw(command_suffix, ...)
    return call('fzf#vim#grep', extend(['rg --no-heading --column --color always '.a:command_suffix, 1], a:000))
  endfunction

  " query, [[ag options], options]
  function! VRg(query, ...)
    let query = empty(a:query) ? '^.' : a:query
    let args = copy(a:000)
    let ag_opts = len(args) > 1 ? remove(args, 0) : ''
    let command = ag_opts . ' ' . "'".substitute(query, "'", "'\\\\''", 'g')."'"
    return call('VRg_raw', insert(args, command, 0))
  endfunction

  " Try to use ripgrep, otherwise fallback to ag
  function! VFind(query, ...)
    let args = insert(copy(a:000), a:query, 0)
    if executable('rg')
      return call('VRg', args)
    endif

    return call('fzf#vim#ag', args)
  endfunction
  command! -bang -nargs=* Find call VFind(<q-args>, <bang>0)

  " Enable per-command history.
  let g:fzf_history_dir = '~/.local/share/fzf-history'

  " If this is Git repo, list git files only, otherwise list all
  function! VFiles()
    if !empty(glob('.git'))
      execute 'GFiles'
    else
      execute 'Files'
    endif
  endfunction

  " Menus {{{
    " Search everywhere (fzf.vim Ag)
    nmap <leader>/ :Find<cr>

    " Help tags (fzf.vim Helptags)
    nmap <leader>? :Helptags<cr>

    " Tags (fzf.vim Tags)
    nmap <leader>t :Tags<cr>

    " Buffer tags (fzf.vim BTags)
    nmap <leader>o :BTags<cr>

    " Files (fzf.vim Files or GFiles)
    nmap <leader>f :call VFiles()<cr>

    " Actions (fzf.vim Commands)
    nmap <leader>a :Commands<cr>

    " Snippets (fzf.vim Snippets)
    nmap <leader>s :Snippets<cr>

    " Commits (fzf.vim Commits)
    nmap <leader>c :Commits<cr>

    " History (fzf.vim History)
    nmap <leader>h :History<cr>

    " Buffers (fzf.vim Buffers)
    nmap <leader>b :Buffers<cr>

    " Windows (fzf.vim Windows)
    nmap <leader>w :Windows<cr>
  " }}}

" }}}

" User configuration {{{
  try
    " Load user configuration
    source $DOTHOME/usr/vimrc
  catch
  endtry

  " Yang
  let g:neomake_yang_enabled_makers = [ 'pyang' ]
  let g:neomake_yang_pyang_maker = {
        \ 'args': [ '--path', get(g:, 'neomake_yang_pyang_yangpath', '.') ],
        \ 'errorformat':
        \ '%f:%l: %trror: %m,' .
        \ '%f:%l: %tarning: %m,'
        \ }

" }}}
